<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sws="http://www.springframework.org/schema/web-services"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd">

	<!--
			* The WebServiceTemplate requires a messageSender and messageFactory 
			* In order to facilitate the sending of plain Java objects, the WebServiceTemplate requires a marshaller and unmarshaller.
			* The WebServiceTemplate class uses an URI as the message destination. 
			See: http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	-->
	<bean id="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate"		
		p:defaultUri="http://localhost:9090/ConnectPoint.Security.svc"
		p:messageSender-ref="messageSender">
		<constructor-arg ref="messageFactory"/>
	</bean>

	<!-- 
			There are two implementations of the WebServiceMessageSender:
			HttpUrlConnectionMessageSender and CommonsHttpMessageSender.
			
			The CommonsHttpMessageSender provides advanced and easy-to-use functionality 
			(such as authentication, HTTP connection pooling, and so forth).
			This uses the Jakarta Commons HttpClient. 
			See http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	 -->
	<bean id="messageSender" class="org.springframework.ws.transport.http.CommonsHttpMessageSender"/>
	
	<!-- 
			There are two message factories for SOAP: SaajSoapMessageFactory and AxiomSoapMessageFactory. 
			If no message factory is specified (via the messageFactory property), Spring-WS will use 
			the SaajSoapMessageFactory by default.
			See: http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	 -->
	 <bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory">
    </bean>
		
	<!-- Here we use the Jaxb2 marshaller to marshall and unmarshall our Java objects -->	
	<!-- <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"
		 p:contextPaths="org.tempuri,
		org.datacontract.schemas._2004._07.radixx_connectpoint_security,
		org.datacontract.schemas._2004._07.radixx_connectpoint_reservation,
		org.datacontract.schemas._2004._07.radixx_connectpoint_flight,
		org.datacontract.schemas._2004._07.radixx_connectpoint_fees,
		org.datacontract.schemas._2004._07.radixx_connectpoint,
		com.microsoft.schemas._2003._10.serialization" /> 
		-->
</beans>